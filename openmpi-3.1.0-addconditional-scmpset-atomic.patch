--- openmpi-3.1.0/ompi/mca/osc/sm/osc_sm_active_target.c.arm5.32	2018-05-07 22:42:22.000000000 +0200
+++ openmpi-3.1.0/ompi/mca/osc/sm/osc_sm_active_target.c	2018-05-16 21:32:24.823599333 +0200
@@ -147,7 +147,7 @@
         }
 
         size = ompi_group_size(module->start_group);
-
+#if OPAL_HAVE_ATOMIC_MATH_64
         for (int i = 0 ; i < size ; ++i) {
             int rank_byte = ranks[i] >> OSC_SM_POST_BITS;
             osc_sm_post_type_t old, rank_bit = ((osc_sm_post_type_t) 1) << (ranks[i] & 0x3f);
@@ -164,6 +164,25 @@
                 old = module->posts[my_rank][rank_byte];
             } while (!opal_atomic_cmpset ((volatile osc_sm_post_type_t *) module->posts[my_rank] + rank_byte, old, old ^ rank_bit));
        }
+#else
+        for (int i = 0 ; i < size ; ++i) {
+            int rank_byte = ranks[i] >> 6;
+            uint32_t old, rank_bit = ((uint32_t) 1) << (ranks[i] & 0x3f);
+
+            /* wait for rank to post */
+            while (!(module->posts[my_rank][rank_byte] & rank_bit)) {
+                opal_progress();
+                opal_atomic_mb();
+            }
+ 
+            opal_atomic_rmb ();
+
+            do {
+                old = module->posts[my_rank][rank_byte];
+            } while (!opal_atomic_cmpset_32 ((int32_t *) module->posts[my_rank]  rank_byte, old, old ^ rank_bit));
+        }
+
+#endif        
 
         free (ranks);
     }
@@ -219,7 +238,11 @@
         (ompi_osc_sm_module_t*) win->w_osc_module;
     int my_rank = ompi_comm_rank (module->comm);
     int my_byte = my_rank >> 6;
+#if OPAL_HAVE_ATOMIC_MATH_64
     uint64_t my_bit = ((uint64_t) 1) << (my_rank & 0x3f);
+#else
+    uint32_t my_bit = ((uint32_t) 1) << (my_rank & 0x3f);
+#endif    
     int gsize;
 
     OPAL_THREAD_LOCK(&module->lock);
@@ -243,10 +266,15 @@
         opal_atomic_mb();
 
         gsize = ompi_group_size(module->post_group);
+#if OPAL_HAVE_ATOMIC_MATH_64
         for (int i = 0 ; i < gsize ; ++i) {
             (void) opal_atomic_add ((volatile osc_sm_post_type_t *) module->posts[ranks[i]] + my_byte, my_bit);
         }
-
+#else
+        for (int i = 0 ; i < gsize ; ++i) {
+            (void) opal_atomic_add_32 ((int32_t *) module->posts[ranks[i]] + my_byte, my_bit);
+        }
+#endif      
         opal_atomic_wmb ();
 
         free (ranks);
